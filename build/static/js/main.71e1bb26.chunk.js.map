{"version":3,"sources":["components/Person.js","components/Content.js","components/PersonForm.js","components/Filter.js","components/Message.js","services/contacts.js","App.js","index.js"],"names":["Person","person","handleClick","name","number","onClick","id","Content","people","search","filteredPeople","filter","toLowerCase","includes","map","key","PersonForm","addPerson","newName","handleNameChange","newNumber","handleNumberChange","onSubmit","value","onChange","placeholder","type","Filter","handleSearch","Message","message","color","error","messageStyle","background","fontSize","borderStyle","borderRadius","padding","marginBottom","style","baseUrl","axios","get","then","response","data","newObject","post","delete","App","useState","persons","setPersons","setNewName","setNewNumber","setSearch","setMessage","setError","useEffect","contactService","initialContacts","showMessage","isError","setTimeout","event","target","preventDefault","personObject","trim","indexOf","returnedPerson","concat","personToRemove","find","window","confirm","catch","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.71e1bb26.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Person = ({ person, handleClick }) =>\r\n  <>\r\n    {person.name}&nbsp;\r\n    {person.number}&nbsp;\r\n    <button onClick={() => handleClick(person.id)}>delete</button>\r\n    <br />\r\n  </>\r\n\r\nexport default Person","import React from 'react'\r\nimport Person from './Person'\r\n\r\nconst Content = ({ people, search, handleClick }) => {\r\n  const filteredPeople = people.filter((person) => person.name.toLowerCase().includes(search.toLowerCase()))\r\n  const rows = () => filteredPeople.map(person => <Person key={person.name} person={person} handleClick={handleClick} />)\r\n  return (\r\n    <div>\r\n      {rows()}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Content","import React from 'react'\r\n\r\nconst PersonForm = ({ addPerson, newName, handleNameChange, newNumber, handleNumberChange }) => (\r\n  <form onSubmit={addPerson}>\r\n    <div>\r\n      name: <input value={newName} onChange={handleNameChange} placeholder='new name' />\r\n    </div>\r\n    <div>\r\n      number: <input value={newNumber} onChange={handleNumberChange} placeholder='new number' />\r\n    </div>\r\n    <div>\r\n      <button type=\"submit\">add</button>\r\n    </div>\r\n  </form>\r\n  )\r\n\r\nexport default PersonForm","import React from 'react'\r\n\r\nconst Filter = ({ search, handleSearch }) => (\r\n  <div>filter shown with <input value={search} onChange={handleSearch} /></div>\r\n  )\r\n\r\nexport default Filter","import React from 'react'\r\n\r\nconst Message = ({ message, error }) => {\r\n\r\n  let color = 'green'\r\n\r\n  if (error) {\r\n    color = 'red'\r\n  }\r\n\r\n  const messageStyle = {\r\n    color: color,\r\n    background: 'lightgrey',\r\n    fontSize: 20,\r\n    borderStyle: 'solid',\r\n    borderRadius: 5,\r\n    padding: 10,\r\n    marginBottom: 20\r\n  }\r\n\r\n  if (message === null) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <div style={messageStyle}>\r\n      {message}\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default Message","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n  const request = axios.get(baseUrl)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n  const request = axios.post(baseUrl, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nconst remove = id => {\r\n  const request = axios.delete(`${baseUrl}/${id}`)\r\n  return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, remove }","import React, { useState, useEffect } from 'react'\r\nimport Content from './components/Content'\r\nimport PersonForm from './components/PersonForm'\r\nimport Filter from './components/Filter'\r\nimport Message from './components/Message'\r\nimport contactService from './services/contacts'\r\n\r\nconst App = () => {\r\n\r\n  // Statet.\r\n  const [persons, setPersons] = useState([])\r\n  const [newName, setNewName] = useState('')\r\n  const [newNumber, setNewNumber] = useState('')\r\n  const [search, setSearch] = useState('')\r\n  const [message, setMessage] = useState(null)\r\n  const [error, setError] = useState(false)\r\n\r\n  // Aluksi haetaan olemassa olevat numerot.\r\n  useEffect(() => {\r\n    contactService\r\n      .getAll()\r\n      .then(initialContacts => {\r\n        setPersons(initialContacts)\r\n      })\r\n  }, [])\r\n\r\n  // Kun kirjoitetaan uutta nimeä, asetetaan tila aina muutoksen myötä.\r\n  const handleNameChange = (event) => {\r\n    setNewName(event.target.value)\r\n  }\r\n\r\n  // Sama numerolle (kts. yllä).\r\n  const handleNumberChange = (event) => {\r\n    setNewNumber(event.target.value)\r\n  }\r\n\r\n  // Sama haulle (kts. yllä).\r\n  const handleSearch = (event) => {\r\n    setSearch(event.target.value)\r\n  }\r\n\r\n  // Ilmoituksen tulostaminen\r\n  const showMessage = (message, isError) => {\r\n    setError(isError)\r\n    setMessage(message)\r\n    setTimeout(() => {\r\n      setMessage(null)\r\n      setError(false)\r\n    }, 3000)\r\n  }\r\n\r\n  // Lisätään henkilö.\r\n  const addPerson = (event) => {\r\n\r\n    event.preventDefault() // Estetään lomakkeen lähetys.\r\n\r\n    // Alustetaan henkilö.\r\n    const personObject = {\r\n      name: newName,\r\n      number: newNumber\r\n    }\r\n\r\n    const personNames = persons.map(persons =>\r\n      persons.name.trim().toLowerCase()\r\n    )\r\n\r\n    // Mapataan persons-array pelkäksi nimi-arrayksi.\r\n    // Jos nimi löytyy (poistetaan välilyönnit ja case sensitivity),\r\n    // kysytään halutaanko vaihtaa numero. Muuten lisätään nimi.\r\n    if (personNames.indexOf(newName.trim().toLowerCase()) !== -1) {\r\n\r\n      // Aiemmin toteutettu henkilön poisto ei toistaiseksi toimi. Korvataan siksi \r\n      // aiempi toiminnallisuus tällä.\r\n\r\n      setNewName('')\r\n      setNewNumber('')\r\n      showMessage(`${newName} already exists!`, true)\r\n\r\n      // if (window.confirm(\r\n      //   `${newName} is already added to phonebook, replace the old number with a new one?`)\r\n      // ) {\r\n      //   // Jos numero halutaan vaihtaa, etsitään listasta muutettava henkilö.\r\n      //   const personToEdit = persons.find(person =>\r\n      //     person.name.trim().toLowerCase() === newName.trim().toLowerCase()\r\n      //   )\r\n      //   // Kopioidaan muutos ja vaihdetaan numero.\r\n      //   const changedPerson = { ...personToEdit, number: newNumber }\r\n      //   // Päivitetään muutos.\r\n      //   contactService\r\n      //     .update(changedPerson.id, changedPerson)\r\n      //     .then(returnedPerson => {\r\n      //       setPersons(persons.map(person =>\r\n      //         person.id !== personToEdit.id ? person : returnedPerson)\r\n      //       )\r\n      //       setNewName('')\r\n      //       setNewNumber('')\r\n      //       showMessage(`Updated ${newName}`, false)\r\n      //     })\r\n      //     .catch(error => {\r\n      //       setPersons(persons.filter(person => person.id !== personToEdit.id))\r\n      //       showMessage(`Information of ${newName} has been removed from the server`, true)\r\n      //     })\r\n      // }\r\n\r\n    } else {\r\n      contactService\r\n        .create(personObject)\r\n        .then(returnedPerson => {\r\n          // Kahdesta selaimesta lisääminen onnistuu yhä.\r\n          // Tätä ei kuitenkaan kai tarvinnut korjata.\r\n          setPersons(persons.concat(returnedPerson))\r\n          setNewName('')\r\n          setNewNumber('')\r\n          showMessage(`Added ${newName}`, false)\r\n        })\r\n    }\r\n  }\r\n\r\n  // Poistetaan henkilö jos käyttäjä haluaa.\r\n  const removePerson = id => {\r\n    const personToRemove = persons.find(person => person.id === id)\r\n    if (window.confirm(`Delete ${personToRemove.name}?`)) {\r\n      contactService\r\n        .remove(id)\r\n        .then(() => {\r\n          setPersons(persons.filter(person => person.id !== id))\r\n          showMessage(`Removed ${personToRemove.name}`, false)\r\n        })\r\n        .catch(error => {\r\n          setPersons(persons.filter(person => person.id !== id))\r\n          showMessage(`Information of ${personToRemove.name} has already been removed from the server`, true)\r\n        })\r\n    }\r\n  }\r\n\r\n  // Renderöinti.\r\n  return (\r\n    <div>\r\n      <h2>Phonebook</h2>\r\n      <Message message={message} error={error} />\r\n      <Filter search={search} handleSearch={handleSearch} />\r\n      <h3>Add a new</h3>\r\n      <PersonForm\r\n        addPerson={addPerson}\r\n        newName={newName}\r\n        handleNameChange={handleNameChange}\r\n        newNumber={newNumber}\r\n        handleNumberChange={handleNumberChange} />\r\n      <h3>Numbers</h3>\r\n      <Content\r\n        people={persons}\r\n        search={search}\r\n        handleClick={removePerson} />\r\n    </div>\r\n\r\n  )\r\n\r\n}\r\n\r\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}